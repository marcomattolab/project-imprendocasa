{"remainingRequest":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\cliente\\cliente.service.ts","dependencies":[{"path":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\cliente\\cliente.service.ts","mtime":1548761751697},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548763036447},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1548763032809},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar moment = require(\"moment\");\r\nvar input_constants_1 = require(\"app/shared/constants/input.constants\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar ClienteService = /** @class */ (function () {\r\n    function ClienteService(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/clientes';\r\n    }\r\n    ClienteService.prototype.create = function (cliente) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(cliente);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ClienteService.prototype.update = function (cliente) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(cliente);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ClienteService.prototype.find = function (id) {\r\n        var _this = this;\r\n        return this.http\r\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ClienteService.prototype.query = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http.get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    ClienteService.prototype.delete = function (id) {\r\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\r\n    };\r\n    ClienteService.prototype.convertDateFromClient = function (cliente) {\r\n        var copy = Object.assign({}, cliente, {\r\n            dataNascita: cliente.dataNascita != null && cliente.dataNascita.isValid() ? cliente.dataNascita.format(input_constants_1.DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    };\r\n    ClienteService.prototype.convertDateFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.dataNascita = res.body.dataNascita != null ? moment(res.body.dataNascita) : null;\r\n        }\r\n        return res;\r\n    };\r\n    ClienteService.prototype.convertDateArrayFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.forEach(function (cliente) {\r\n                cliente.dataNascita = cliente.dataNascita != null ? moment(cliente.dataNascita) : null;\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n    ClienteService.prototype.findByUser = function (req) {\r\n        var options = shared_1.createRequestOption(req);\r\n        var url = this.resourceUrl + '/currentUser';\r\n        return this.http.get(url, { params: options, observe: 'response' });\r\n    };\r\n    /* findByNome(nome: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(nome);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/nome/${nome}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n     findByCognome(cognome: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(cognome);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/cognome/${cognome}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n     findByDate(data: moment.Moment): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(data);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/data/${data}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n      findByNumero(numero: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(numero);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/numero/${numero}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n      findByEmail(email: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(email);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/email/${email}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n      findByIndirizzo(indirizzo: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(indirizzo);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/indirizzo/${indirizzo}`, { params: options, observe: 'response' });\r\n      }*/\r\n    ClienteService.prototype.findByFreeSearch = function (stringa) {\r\n        var options = shared_1.createRequestOption(stringa);\r\n        return this.http.get(this.resourceUrl + \"/freeSearch/\" + stringa, {\r\n            params: options,\r\n            observe: 'response'\r\n        });\r\n    };\r\n    var _a;\r\n    ClienteService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], ClienteService);\r\n    return ClienteService;\r\n}());\r\nexports.ClienteService = ClienteService;\r\n",{"version":3,"file":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\cliente\\cliente.service.ts","sourceRoot":"","sources":["C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\cliente\\cliente.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpResponse} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport {DATE_FORMAT} from 'app/shared/constants/input.constants';\r\nimport {map} from 'rxjs/operators';\r\n\r\nimport {SERVER_API_URL} from 'app/app.constants';\r\nimport {createRequestOption} from 'app/shared';\r\nimport {Cliente} from 'app/shared/model/cliente.model';\r\n\r\ntype EntityResponseType = HttpResponse<Cliente>;\r\ntype EntityArrayResponseType = HttpResponse<Cliente[]>;\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class ClienteService {\r\n    public resourceUrl = SERVER_API_URL + 'api/clientes';\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    create(cliente: Cliente): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(cliente);\r\n        return this.http\r\n            .post<Cliente>(this.resourceUrl, copy, {observe: 'response'})\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(cliente: Cliente): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(cliente);\r\n        return this.http\r\n            .put<Cliente>(this.resourceUrl, copy, {observe: 'response'})\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    find(id: string): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Cliente>(`${this.resourceUrl}/${id}`, {observe: 'response'})\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http.get<Cliente[]>(this.resourceUrl, {params: options, observe: 'response'})\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\r\n    }\r\n\r\n    protected convertDateFromClient(cliente: Cliente): Cliente {\r\n        const copy: Cliente = Object.assign({}, cliente, {\r\n            dataNascita: cliente.dataNascita != null && cliente.dataNascita.isValid() ? cliente.dataNascita.format(DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    }\r\n\r\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.dataNascita = res.body.dataNascita != null ? moment(res.body.dataNascita) : null;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((cliente: Cliente) => {\r\n                cliente.dataNascita = cliente.dataNascita != null ? moment(cliente.dataNascita) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    findByUser(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        const url = this.resourceUrl + '/currentUser';\r\n        return this.http.get<Cliente[]>(url, {params: options, observe: 'response'});\r\n    }\r\n\r\n    /* findByNome(nome: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(nome);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/nome/${nome}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n     findByCognome(cognome: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(cognome);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/cognome/${cognome}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n     findByDate(data: moment.Moment): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(data);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/data/${data}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n      findByNumero(numero: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(numero);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/numero/${numero}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n      findByEmail(email: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(email);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/email/${email}`, { params: options, observe: 'response' });\r\n     }\r\n\r\n      findByIndirizzo(indirizzo: string): Observable<EntityArrayResponseType> {\r\n         const options = createRequestOption(indirizzo);\r\n         return this.http.get<Cliente[]>(`${this.resourceUrl}/indirizzo/${indirizzo}`, { params: options, observe: 'response' });\r\n      }*/\r\n\r\n    findByFreeSearch(stringa: string): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(stringa);\r\n        return this.http.get<Cliente[]>(`${this.resourceUrl}/freeSearch/${stringa}`, {\r\n            params: options,\r\n            observe: 'response'\r\n        });\r\n    }\r\n\r\n}\r\n"]}]}