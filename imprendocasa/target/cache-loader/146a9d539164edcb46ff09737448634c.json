{"remainingRequest":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","dependencies":[{"path":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","mtime":1548761749779},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548763036447},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1548763032809},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar JhiHealthService = /** @class */ (function () {\r\n    function JhiHealthService(http) {\r\n        this.http = http;\r\n        this.separator = '.';\r\n    }\r\n    JhiHealthService.prototype.checkHealth = function () {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/health');\r\n    };\r\n    JhiHealthService.prototype.transformHealthData = function (data) {\r\n        var response = [];\r\n        this.flattenHealthData(response, null, data.details);\r\n        return response;\r\n    };\r\n    JhiHealthService.prototype.getBaseName = function (name) {\r\n        if (name) {\r\n            var split = name.split('.');\r\n            return split[0];\r\n        }\r\n    };\r\n    JhiHealthService.prototype.getSubSystemName = function (name) {\r\n        if (name) {\r\n            var split = name.split('.');\r\n            split.splice(0, 1);\r\n            var remainder = split.join('.');\r\n            return remainder ? ' - ' + remainder : '';\r\n        }\r\n    };\r\n    /* private methods */\r\n    JhiHealthService.prototype.addHealthObject = function (result, isLeaf, healthObject, name) {\r\n        var healthData = {\r\n            name: name\r\n        };\r\n        var details = {};\r\n        var hasDetails = false;\r\n        for (var key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                var value = healthObject[key];\r\n                if (key === 'status' || key === 'error') {\r\n                    healthData[key] = value;\r\n                }\r\n                else {\r\n                    if (!this.isHealthObject(value)) {\r\n                        details[key] = value;\r\n                        hasDetails = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Add the details\r\n        if (hasDetails) {\r\n            healthData.details = details;\r\n        }\r\n        // Only add nodes if they provide additional information\r\n        if (isLeaf || hasDetails || healthData.error) {\r\n            result.push(healthData);\r\n        }\r\n        return healthData;\r\n    };\r\n    JhiHealthService.prototype.flattenHealthData = function (result, path, data) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                var value = data[key];\r\n                if (this.isHealthObject(value)) {\r\n                    if (this.hasSubSystem(value)) {\r\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\r\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\r\n                    }\r\n                    else {\r\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService.prototype.getModuleName = function (path, name) {\r\n        var result;\r\n        if (path && name) {\r\n            result = path + this.separator + name;\r\n        }\r\n        else if (path) {\r\n            result = path;\r\n        }\r\n        else if (name) {\r\n            result = name;\r\n        }\r\n        else {\r\n            result = '';\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService.prototype.hasSubSystem = function (healthObject) {\r\n        var result = false;\r\n        for (var key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                var value = healthObject[key];\r\n                if (value && value.status) {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService.prototype.isHealthObject = function (healthObject) {\r\n        var result = false;\r\n        for (var key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                if (key === 'status') {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    var _a;\r\n    JhiHealthService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], JhiHealthService);\r\n    return JhiHealthService;\r\n}());\r\nexports.JhiHealthService = JhiHealthService;\r\n",{"version":3,"file":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","sourceRoot":"","sources":["C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\admin\\health\\health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiHealthService {\n    separator: string;\n\n    constructor(private http: HttpClient) {\n        this.separator = '.';\n    }\n\n    checkHealth(): Observable<any> {\n        return this.http.get(SERVER_API_URL + 'management/health');\n    }\n\n    transformHealthData(data): any {\n        const response = [];\n        this.flattenHealthData(response, null, data.details);\n        return response;\n    }\n\n    getBaseName(name): string {\n        if (name) {\n            const split = name.split('.');\n            return split[0];\n        }\n    }\n\n    getSubSystemName(name): string {\n        if (name) {\n            const split = name.split('.');\n            split.splice(0, 1);\n            const remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n\n    /* private methods */\n    private addHealthObject(result, isLeaf, healthObject, name): any {\n        const healthData: any = {\n            name\n        };\n\n        const details = {};\n        let hasDetails = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n\n    private flattenHealthData(result, path, data): any {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    } else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private getModuleName(path, name): string {\n        let result;\n        if (path && name) {\n            result = path + this.separator + name;\n        } else if (path) {\n            result = path;\n        } else if (name) {\n            result = name;\n        } else {\n            result = '';\n        }\n        return result;\n    }\n\n    private hasSubSystem(healthObject): boolean {\n        let result = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    private isHealthObject(healthObject): boolean {\n        let result = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === 'status') {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n}\n"]}]}