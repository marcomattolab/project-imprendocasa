{"remainingRequest":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts","dependencies":[{"path":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts","mtime":1548761750362},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548763036447},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1548763032809},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar ng_jhipster_1 = require(\"ng-jhipster\");\r\nvar ngx_webstorage_1 = require(\"ngx-webstorage\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar account_service_1 = require(\"./account.service\");\r\nvar Principal = /** @class */ (function () {\r\n    function Principal(languageService, sessionStorage, account) {\r\n        this.languageService = languageService;\r\n        this.sessionStorage = sessionStorage;\r\n        this.account = account;\r\n        this.authenticated = false;\r\n        this.authenticationState = new rxjs_1.Subject();\r\n    }\r\n    Principal.prototype.authenticate = function (identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    };\r\n    Principal.prototype.hasAnyAuthority = function (authorities) {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    };\r\n    Principal.prototype.hasAnyAuthorityDirect = function (authorities) {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Principal.prototype.hasAuthority = function (authority) {\r\n        if (!this.authenticated) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.identity().then(function (id) {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, function () {\r\n            return Promise.resolve(false);\r\n        });\r\n    };\r\n    Principal.prototype.identity = function (force) {\r\n        var _this = this;\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account\r\n            .get()\r\n            .toPromise()\r\n            .then(function (response) {\r\n            var account = response.body;\r\n            if (account) {\r\n                _this.userIdentity = account;\r\n                _this.authenticated = true;\r\n                // After retrieve the account info, the language will be changed to\r\n                // the user's preferred language configured in the account setting\r\n                var langKey = _this.sessionStorage.retrieve('locale') || _this.userIdentity.langKey;\r\n                _this.languageService.changeLanguage(langKey);\r\n            }\r\n            else {\r\n                _this.userIdentity = null;\r\n                _this.authenticated = false;\r\n            }\r\n            _this.authenticationState.next(_this.userIdentity);\r\n            return _this.userIdentity;\r\n        })\r\n            .catch(function (err) {\r\n            _this.userIdentity = null;\r\n            _this.authenticated = false;\r\n            _this.authenticationState.next(_this.userIdentity);\r\n            return null;\r\n        });\r\n    };\r\n    Principal.prototype.isAuthenticated = function () {\r\n        return this.authenticated;\r\n    };\r\n    Principal.prototype.isIdentityResolved = function () {\r\n        return this.userIdentity !== undefined;\r\n    };\r\n    Principal.prototype.getAuthenticationState = function () {\r\n        return this.authenticationState.asObservable();\r\n    };\r\n    Principal.prototype.getImageUrl = function () {\r\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\r\n    };\r\n    var _a, _b, _c;\r\n    Principal = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiLanguageService !== \"undefined\" && ng_jhipster_1.JhiLanguageService) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _b : Object, typeof (_c = typeof account_service_1.AccountService !== \"undefined\" && account_service_1.AccountService) === \"function\" ? _c : Object])\r\n    ], Principal);\r\n    return Principal;\r\n}());\r\nexports.Principal = Principal;\r\n",{"version":3,"file":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts","sourceRoot":"","sources":["C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { Observable, Subject } from 'rxjs';\nimport { AccountService } from './account.service';\n\n@Injectable({ providedIn: 'root' })\nexport class Principal {\n    private userIdentity: any;\n    private authenticated = false;\n    private authenticationState = new Subject<any>();\n\n    constructor(\n        private languageService: JhiLanguageService,\n        private sessionStorage: SessionStorageService,\n        private account: AccountService\n    ) {}\n\n    authenticate(identity) {\n        this.userIdentity = identity;\n        this.authenticated = identity !== null;\n        this.authenticationState.next(this.userIdentity);\n    }\n\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\n    }\n\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n            return false;\n        }\n\n        for (let i = 0; i < authorities.length; i++) {\n            if (this.userIdentity.authorities.includes(authorities[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    hasAuthority(authority: string): Promise<boolean> {\n        if (!this.authenticated) {\n            return Promise.resolve(false);\n        }\n\n        return this.identity().then(\n            id => {\n                return Promise.resolve(id.authorities && id.authorities.includes(authority));\n            },\n            () => {\n                return Promise.resolve(false);\n            }\n        );\n    }\n\n    identity(force?: boolean): Promise<any> {\n        if (force === true) {\n            this.userIdentity = undefined;\n        }\n\n        // check and see if we have retrieved the userIdentity data from the server.\n        // if we have, reuse it by immediately resolving\n        if (this.userIdentity) {\n            return Promise.resolve(this.userIdentity);\n        }\n\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n        return this.account\n            .get()\n            .toPromise()\n            .then(response => {\n                const account = response.body;\n                if (account) {\n                    this.userIdentity = account;\n                    this.authenticated = true;\n\n                    // After retrieve the account info, the language will be changed to\n                    // the user's preferred language configured in the account setting\n                    const langKey = this.sessionStorage.retrieve('locale') || this.userIdentity.langKey;\n                    this.languageService.changeLanguage(langKey);\n                } else {\n                    this.userIdentity = null;\n                    this.authenticated = false;\n                }\n                this.authenticationState.next(this.userIdentity);\n                return this.userIdentity;\n            })\n            .catch(err => {\n                this.userIdentity = null;\n                this.authenticated = false;\n                this.authenticationState.next(this.userIdentity);\n                return null;\n            });\n    }\n\n    isAuthenticated(): boolean {\n        return this.authenticated;\n    }\n\n    isIdentityResolved(): boolean {\n        return this.userIdentity !== undefined;\n    }\n\n    getAuthenticationState(): Observable<any> {\n        return this.authenticationState.asObservable();\n    }\n\n    getImageUrl(): string {\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n    }\n}\n"]}]}