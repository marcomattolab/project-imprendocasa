{"remainingRequest":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\incarico\\selezione-cliente\\selezione-cliente.component.ts","dependencies":[{"path":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\incarico\\selezione-cliente\\selezione-cliente.component.ts","mtime":1548761752592},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1548763036447},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1548763032809},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\r\nvar tag_model_1 = require(\"app/shared/model/tag.model\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar cliente_util_1 = require(\"app/entities/cliente/cliente-util\");\r\nvar SelezioneClienteComponent = /** @class */ (function () {\r\n    function SelezioneClienteComponent(router) {\r\n        var _this = this;\r\n        this.router = router;\r\n        this.focus$ = new rxjs_1.Subject();\r\n        this.click$ = new rxjs_1.Subject();\r\n        this.clienteListChanges = new core_1.EventEmitter();\r\n        this.inputControlId = '';\r\n        this.search = function (text$) {\r\n            var debouncedText$ = text$.pipe(operators_1.debounceTime(200), operators_1.distinctUntilChanged());\r\n            var clicksWithClosedPopup$ = _this.click$.pipe(operators_1.filter(function () { return !_this.typeahead.isPopupOpen(); }));\r\n            var inputFocus$ = _this.focus$;\r\n            return rxjs_1.merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(operators_1.map(function (term) { return (term === '' ?\r\n                _this.getAvailableClienti() : _this.getAvailableClienti()\r\n                .filter(function (v) { return v.toLowerCase().indexOf(term.toLowerCase()) > -1; })).slice(0, 10); }));\r\n        };\r\n    }\r\n    SelezioneClienteComponent.prototype.ngOnInit = function () {\r\n        var randomNumber = Math.random() * 1000;\r\n        var randomInteger = Math.floor(randomNumber);\r\n        this.inputControlId = \"selezione-cliente-\" + randomInteger;\r\n    };\r\n    SelezioneClienteComponent.prototype.getAvailableClienti = function () {\r\n        var _this = this;\r\n        var result = [];\r\n        this.completeClienteList.forEach(function (cliente) {\r\n            var toAdd = true;\r\n            for (var _i = 0, _a = _this.incaricoClienteList; _i < _a.length; _i++) {\r\n                var incaricoCliente = _a[_i];\r\n                if (incaricoCliente.id === cliente.id) {\r\n                    toAdd = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (toAdd) {\r\n                result.push(cliente_util_1.getFormattedNomeCognomeAsString(cliente));\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    SelezioneClienteComponent.prototype.onSelectCliente = function (ngbTypeaheadSelectItem) {\r\n        ngbTypeaheadSelectItem.preventDefault();\r\n        var clienteFound = this.completeClienteList.find(function (committente) {\r\n            return cliente_util_1.getFormattedNomeCognomeAsString(committente) === ngbTypeaheadSelectItem.item;\r\n        });\r\n        if (clienteFound) {\r\n            this.incaricoClienteList.push(clienteFound);\r\n        }\r\n        this.clienteListChanges.emit(clienteFound);\r\n        this.typeahead.writeValue('');\r\n    };\r\n    SelezioneClienteComponent.prototype.rimuoviCliente = function (cliente) {\r\n        var indexOf = this.incaricoClienteList.indexOf(cliente);\r\n        this.incaricoClienteList.splice(indexOf, 1);\r\n        this.clienteListChanges.emit(cliente);\r\n    };\r\n    SelezioneClienteComponent.prototype.nuovoCliente = function () {\r\n        var navigationExtras = {\r\n            queryParams: {\r\n                incaricoRef: this.incaricoId,\r\n                clienteTag: this.tag\r\n            }\r\n        };\r\n        this.router.navigate(['/cliente/new'], navigationExtras);\r\n    };\r\n    SelezioneClienteComponent.prototype.isClientiSelezionati = function () {\r\n        return this.incaricoClienteList && this.incaricoClienteList.length > 0;\r\n    };\r\n    var _a, _b, _c;\r\n    tslib_1.__decorate([\r\n        core_1.ViewChild('typeahead'),\r\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof ng_bootstrap_1.NgbTypeahead !== \"undefined\" && ng_bootstrap_1.NgbTypeahead) === \"function\" ? _a : Object)\r\n    ], SelezioneClienteComponent.prototype, \"typeahead\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", String)\r\n    ], SelezioneClienteComponent.prototype, \"label\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", String)\r\n    ], SelezioneClienteComponent.prototype, \"buttonLabel\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", String)\r\n    ], SelezioneClienteComponent.prototype, \"incaricoId\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", Array)\r\n    ], SelezioneClienteComponent.prototype, \"completeClienteList\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", Array)\r\n    ], SelezioneClienteComponent.prototype, \"incaricoClienteList\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", typeof (_b = typeof tag_model_1.TagEnum !== \"undefined\" && tag_model_1.TagEnum) === \"function\" ? _b : Object)\r\n    ], SelezioneClienteComponent.prototype, \"tag\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Output(),\r\n        tslib_1.__metadata(\"design:type\", Object)\r\n    ], SelezioneClienteComponent.prototype, \"clienteListChanges\", void 0);\r\n    SelezioneClienteComponent = tslib_1.__decorate([\r\n        core_1.Component({\r\n            selector: 'jhi-selezione-cliente',\r\n            templateUrl: './selezione-cliente.component.html',\r\n            styleUrls: ['./selezione-cliente.component.scss']\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _c : Object])\r\n    ], SelezioneClienteComponent);\r\n    return SelezioneClienteComponent;\r\n}());\r\nexports.SelezioneClienteComponent = SelezioneClienteComponent;\r\n",{"version":3,"file":"C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\incarico\\selezione-cliente\\selezione-cliente.component.ts","sourceRoot":"","sources":["C:\\workspace-jidea\\imprendocasa\\node_modules\\angular-router-loader\\src\\index.js!C:\\workspace-jidea\\imprendocasa\\node_modules\\tslint-loader\\index.js!C:\\workspace-jidea\\imprendocasa\\src\\main\\webapp\\app\\entities\\incarico\\selezione-cliente\\selezione-cliente.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map} from 'rxjs/operators';\nimport {NgbTypeahead, NgbTypeaheadSelectItemEvent} from '@ng-bootstrap/ng-bootstrap';\nimport {Cliente} from 'app/shared/model/cliente.model';\nimport {TagEnum} from 'app/shared/model/tag.model';\nimport {Router} from '@angular/router';\nimport {getFormattedNomeCognomeAsString} from 'app/entities/cliente/cliente-util';\n\n@Component({\n    selector: 'jhi-selezione-cliente',\n    templateUrl: './selezione-cliente.component.html',\n    styleUrls: ['./selezione-cliente.component.scss']\n})\nexport class SelezioneClienteComponent implements OnInit {\n\n    @ViewChild('typeahead')\n    typeahead: NgbTypeahead;\n    focus$ = new Subject<string>();\n    click$ = new Subject<string>();\n\n    @Input() label: string;\n    @Input() buttonLabel: string;\n    @Input() incaricoId: string;\n    @Input() completeClienteList: Cliente[];\n    @Input() incaricoClienteList: Cliente[];\n    @Input() tag: TagEnum;\n\n    @Output() clienteListChanges = new EventEmitter();\n\n    inputControlId = '';\n\n    constructor(\n        private router: Router\n    ) {\n    }\n\n    ngOnInit() {\n        const randomNumber = Math.random() * 1000;\n        const randomInteger = Math.floor(randomNumber);\n        this.inputControlId = `selezione-cliente-${randomInteger}`;\n    }\n\n    search = (text$: Observable<string>) => {\n        const debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());\n\n        const clicksWithClosedPopup$ = this.click$.pipe(\n            filter(() => !this.typeahead.isPopupOpen()));\n\n        const inputFocus$ = this.focus$;\n\n        return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(\n            map(term => (term === '' ?\n                this.getAvailableClienti() : this.getAvailableClienti()\n                    .filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1)).slice(0, 10))\n        );\n    };\n\n    private getAvailableClienti() {\n        const result = [];\n\n        this.completeClienteList.forEach(cliente => {\n            let toAdd = true;\n            for (const incaricoCliente of this.incaricoClienteList) {\n                if (incaricoCliente.id === cliente.id) {\n                    toAdd = false;\n                    break;\n                }\n            }\n\n            if (toAdd) {\n                result.push(getFormattedNomeCognomeAsString(cliente));\n            }\n        });\n\n        return result;\n    }\n\n    onSelectCliente(ngbTypeaheadSelectItem: NgbTypeaheadSelectItemEvent) {\n        ngbTypeaheadSelectItem.preventDefault();\n\n        const clienteFound = this.completeClienteList.find(committente =>\n            getFormattedNomeCognomeAsString(committente) === ngbTypeaheadSelectItem.item);\n\n        if (clienteFound) {\n            this.incaricoClienteList.push(clienteFound);\n        }\n\n        this.clienteListChanges.emit(clienteFound);\n\n        this.typeahead.writeValue('');\n    }\n\n    rimuoviCliente(cliente: Cliente) {\n        const indexOf = this.incaricoClienteList.indexOf(cliente);\n        this.incaricoClienteList.splice(indexOf, 1);\n\n        this.clienteListChanges.emit(cliente);\n    }\n\n    nuovoCliente() {\n        const navigationExtras = {\n            queryParams: {\n                incaricoRef: this.incaricoId,\n                clienteTag: this.tag\n            }\n        };\n        this.router.navigate(['/cliente/new'], navigationExtras);\n    }\n\n    isClientiSelezionati(): boolean {\n        return this.incaricoClienteList && this.incaricoClienteList.length > 0;\n    }\n}\n"]}]}