{"version":3,"file":"lineCompare.component.js","sourceRoot":"","sources":["../src/lineCompare.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { Diff, DiffOp } from './diffMatchPatch';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\n\n/* Holds the state of the calculation of the diff result we intend to display.\n *  > lines contains the data that will be displayed on screen.\n *  > lineLeft keeps track of the document line number in the [left] input.\n *  > lineRight keeps track of the document line number in the [right] input.\n */\ntype DiffCalculation = {\n  lines: Array<[string, string, string, string]>,\n  lineLeft: number,\n  lineRight: number\n};\n\n@Component({\n  selector: 'dmp-line-compare',\n  styles: [`\n    div.dmp-line-compare {\n      display: flex;\n      flex-direction: row;\n      border: 1px solid #808080;\n      font-family: Consolas, Courier, monospace;\n      width: 911px;\n    }\n    div.dmp-line-compare-margin {\n      width: 101px;\n    }\n    div.dmp-line-compare-content {\n      position: relative;\n      top: 0px;\n      left: 0px;\n      flex-grow: 1;\n      overflow-x: scroll;\n    }\n    div.dmp-line-compare-content-wrapper {\n      position: absolute;\n      top: 0px;\n      left: 0px;\n      display: flex;\n      flex-direction: column;\n      align-items: stretch;\n    }\n    div.dmp-line-compare-left {\n      width: 50px;\n      text-align: center;\n      color: #484848;\n    }\n    div.dmp-line-compare-equal>div.dmp-line-compare-left,\n      div.dmp-line-compare-equal>div.dmp-line-compare-right {\n      background-color: #dedede;\n    }\n    div.dmp-line-compare-insert>div.dmp-line-compare-left,\n      div.dmp-line-compare-insert>div.dmp-line-compare-right {\n      background-color: #8bfb6f;\n    }\n    div.dmp-line-compare-delete>div.dmp-line-compare-left,\n      div.dmp-line-compare-delete>div.dmp-line-compare-right {\n      background-color: #f56868;\n    }\n    div.dmp-line-compare-right {\n      width: 50px;\n      text-align: center;\n      color: #484848;\n      border-right: 1px solid #888888;\n    }\n    div.dmp-line-compare-text {\n      white-space: pre;\n      padding-left: 10px;\n      min-width: 800px;\n    }\n    .dmp-line-compare-delete {\n      background-color: #ff8c8c;\n    }\n    .dmp-line-compare-insert {\n      background-color: #9dff97;\n    }\n    .dmp-line-compare-delete>div {\n      display: inline-block;\n    }  \n    .dmp-line-compare-insert>div {\n      display: inline-block;\n    }\n    .dmp-line-compare-equal>div {\n      display: inline-block;\n    }\n    .dmp-margin-bottom-spacer {\n      height: 20px;\n      background-color: #dedede;\n      border-right: 1px solid #888888;\n    }\n  `],\n  template: `\n    <div class=\"dmp-line-compare-no-changes-text\" *ngIf=\"isContentEqual\">\n      There are no changes to display.\n    </div>    \n    <div class=\"dmp-line-compare\" *ngIf=\"!isContentEqual\">\n      <div class=\"dmp-line-compare-margin\">\n        <div [ngClass]=\"lineDiff[0]\" *ngFor=\"let lineDiff of calculatedDiff\">\n          <div class=\"dmp-line-compare-left\">{{lineDiff[1]}}</div><!-- No space\n        --><div class=\"dmp-line-compare-right\">{{lineDiff[2]}}</div>\n        </div>\n        <div class=\"dmp-margin-bottom-spacer\"></div>\n      </div><!-- No space\n   --><div class=\"dmp-line-compare-content\">\n        <div class=\"dmp-line-compare-content-wrapper\">\n          <div [ngClass]=\"lineDiff[0]\" *ngFor=\"let lineDiff of calculatedDiff\">\n            <div class=\"dmp-line-compare-text\">{{lineDiff[3]}}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class LineCompareComponent implements OnInit, OnChanges {\n  @Input()\n  public left: string | number | boolean;\n  @Input()\n  public right: string | number | boolean;\n  // The number of lines of context to provide either side of a DiffOp.Insert or DiffOp.Delete diff.\n  // Context is taken from a DiffOp.Equal section.\n  @Input()\n  public lineContextSize: number;\n\n  public calculatedDiff: Array<[string, string, string]>;\n  public isContentEqual: boolean;\n\n  public constructor(\n      private dmp: DiffMatchPatchService) {}\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    if (typeof this.left === 'number' || typeof this.left === 'boolean') {\n      this.left = this.left.toString();\n    }\n    if (typeof this.right === 'number' || typeof this.right === 'boolean') {\n      this.right = this.right.toString();\n    }\n    this.calculateLineDiff(this.dmp.getLineDiff(this.left, this.right));\n  }\n\n  private calculateLineDiff(diffs: Array<Diff>): void {\n    const diffCalculation: DiffCalculation = {\n      lines: [],\n      lineLeft: 1,\n      lineRight: 1\n    };\n\n    this.isContentEqual = diffs.length === 1 && diffs[0][0] === DiffOp.Equal;\n    if (this.isContentEqual) {\n      this.calculatedDiff = [];\n      return;\n    }\n\n    for (let i = 0; i < diffs.length; i++) {\n      const diff = diffs[i];\n      let diffLines: string[] = diff[1].split(/\\r?\\n/);\n\n      // If the original line had a \\r\\n at the end then remove the\n      // empty string after it.\n      if (diffLines[diffLines.length - 1].length == 0) {\n        diffLines.pop();\n      }\n\n      switch (diff[0]) {\n        case DiffOp.Equal: {\n          const isFirstDiff = i === 0;\n          const isLastDiff = i === diffs.length - 1;\n          this.outputEqualDiff(diffLines, diffCalculation, isFirstDiff, isLastDiff);\n          break;\n        }\n        case DiffOp.Delete: {\n          this.outputDeleteDiff(diffLines, diffCalculation);\n          break;\n        }\n        case DiffOp.Insert: {\n          this.outputInsertDiff(diffLines, diffCalculation);\n          break;\n        }\n      }\n    }\n\n    this.calculatedDiff = diffCalculation.lines;\n  }\n\n  /* If the number of diffLines is greater than lineContextSize then we may need to adjust the diff\n   * that is output.\n   *   > If the first diff of a document is DiffOp.Equal then the leading lines can be dropped\n   *     leaving the last 'lineContextSize' lines for context.\n   *   > If the last diff of a document is DiffOp.Equal then the trailing lines can be dropped\n   *     leaving the first 'lineContextSize' lines for context.\n   *   > If the diff is a DiffOp.Equal occurs in the middle then the diffs either side of it must be\n   *     DiffOp.Insert or DiffOp.Delete. If it has more than 2 * 'lineContextSize' lines of content\n   *     then the middle lines are dropped leaving the first 'lineContextSize' and last 'lineContextSize'\n   *     lines for context. A special line is inserted with '...' indicating that content is skipped.\n   *\n   * A document cannot consist of a single Diff with DiffOp.Equal and reach this function because\n   * in this case the calculateLineDiff method returns early.\n   */\n  private outputEqualDiff(\n      diffLines: string[],\n      diffCalculation: DiffCalculation,\n      isFirstDiff: boolean,\n      isLastDiff: boolean): void {\n    if (this.lineContextSize && diffLines.length > this.lineContextSize) {\n      if (isFirstDiff) {\n        // Take the last 'lineContextSize' lines from the first diff\n        const lineIncrement = diffLines.length - this.lineContextSize;\n        diffCalculation.lineLeft += lineIncrement;\n        diffCalculation.lineRight += lineIncrement;\n        diffLines = diffLines.slice(diffLines.length - this.lineContextSize, diffLines.length);\n      }\n      else if (isLastDiff) {\n        // Take only the first 'lineContextSize' lines from the final diff\n        diffLines = diffLines.slice(0, this.lineContextSize);\n      }\n      else if (diffLines.length > 2 * this.lineContextSize) {\n        // Take the first 'lineContextSize' lines from this diff to provide context for the last diff\n        this.outputEqualDiffLines(diffLines.slice(0, this.lineContextSize), diffCalculation);\n\n        // Output a special line indicating that some content is equal and has been skipped\n        diffCalculation.lines.push(['dmp-line-compare-equal', '...', '...', '...']);\n        const numberOfSkippedLines = diffLines.length - (2 * this.lineContextSize);\n        diffCalculation.lineLeft += numberOfSkippedLines;\n        diffCalculation.lineRight += numberOfSkippedLines;\n\n        // Take the last 'lineContextSize' lines from this diff to provide context for the next diff\n        this.outputEqualDiffLines(diffLines.slice(diffLines.length - this.lineContextSize), diffCalculation);\n        // This if branch has already output the diff lines so we return early to avoid outputting the lines\n        // at the end of the method.\n        return;\n      }\n    }\n    this.outputEqualDiffLines(diffLines, diffCalculation);\n  }\n\n  private outputEqualDiffLines(\n      diffLines: string[],\n      diffCalculation: DiffCalculation): void {\n    for (const line of diffLines) {\n      diffCalculation.lines.push(['dmp-line-compare-equal', `${diffCalculation.lineLeft}`, `${diffCalculation.lineRight}`, line]);\n      diffCalculation.lineLeft++;\n      diffCalculation.lineRight++;\n    }\n  }\n\n  private outputDeleteDiff(\n      diffLines: string[],\n      diffCalculation: DiffCalculation): void {\n    for (const line of diffLines) {\n      diffCalculation.lines.push(['dmp-line-compare-delete', `${diffCalculation.lineLeft}`, '-', line]);\n      diffCalculation.lineLeft++;\n    }\n  }\n\n  private outputInsertDiff(\n      diffLines: string[],\n      diffCalculation: DiffCalculation): void {\n    for (const line of diffLines) {\n      diffCalculation.lines.push(['dmp-line-compare-insert', '-', `${diffCalculation.lineRight}`, line]);\n      diffCalculation.lineRight++;\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}