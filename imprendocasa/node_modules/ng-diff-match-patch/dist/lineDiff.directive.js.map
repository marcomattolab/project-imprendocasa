{"version":3,"file":"lineDiff.directive.js","sourceRoot":"","sources":["../src/lineDiff.directive.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAgF;AAChF,mEAAiE;AAMjE;IAIE,2BACU,EAAc,EACd,GAA0B;QAD1B,OAAE,GAAF,EAAE,CAAY;QACd,QAAG,GAAH,GAAG,CAAuB;IAAK,CAAC;IAEnC,oCAAQ,GAAf;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEM,uCAAW,GAAlB;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,sCAAU,GAAlB;QACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACpE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACjG,CAAC;IAED,wCAAwC;IAChC,sCAAU,GAAlB,UAAmB,KAAkB;QACnC,IAAI,IAAY,CAAC;QACjB,IAAI,GAAG,OAAO,CAAC;QACf,GAAG,CAAC,CAAa,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAjB,IAAI,IAAI,cAAA;YACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAiB,CAAC,CAAC,CAAC;gBAC7B,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAkB,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,6BAA6B,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC;YACrE,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAkB,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,6BAA6B,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC;YACrE,CAAC;SACF;QACD,IAAI,IAAI,QAAQ,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IA1CQ;QAAR,YAAK,EAAE;;mDAAiC;IAChC;QAAR,YAAK,EAAE;;oDAAkC;IAF/B,iBAAiB;QAH7B,gBAAS,CAAC;YACT,QAAQ,EAAE,YAAY;SACvB,CAAC;yCAMc,iBAAU;YACT,8CAAqB;OANzB,iBAAiB,CA4C7B;IAAD,wBAAC;CAAA,AA5CD,IA4CC;AA5CY,8CAAiB","sourcesContent":["import { Directive, ElementRef, Input, OnInit, OnChanges } from '@angular/core';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\nimport { Diff, DiffOp } from './diffMatchPatch';\n\n@Directive({\n  selector: '[lineDiff]',\n})\nexport class LineDiffDirective implements OnInit, OnChanges {\n  @Input() left: string | number | boolean;\n  @Input() right: string | number | boolean;\n\n  public constructor(\n    private el: ElementRef,\n    private dmp: DiffMatchPatchService) {  }\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    if (typeof this.left === 'number' || typeof this.left === 'boolean') {\n      this.left = this.left.toString();\n    }\n    if (typeof this.right === 'number' || typeof this.right === 'boolean') {\n      this.right = this.right.toString();\n    }\n    this.el.nativeElement.innerHTML = this.createHtml(this.dmp.getLineDiff(this.left, this.right));\n  }\n\n  // TODO: Need to fix this for line diffs\n  private createHtml(diffs: Array<Diff>): string {\n    let html: string;\n    html = '<div>';\n    for (let diff of diffs) {\n      if (diff[0] === DiffOp.Equal) {\n        html += diff[1];\n      }\n      if (diff[0] === DiffOp.Delete) {\n        html += '<div class=\\\"del\\\"> - <del>' + diff[1] + '</del></div>\\n';\n      }\n      if (diff[0] === DiffOp.Insert) {\n        html += '<div class=\\\"ins\\\"> + <ins>' + diff[1] + '</ins></div>\\n';\n      }\n    }\n    html += '</div>';\n    return html;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}