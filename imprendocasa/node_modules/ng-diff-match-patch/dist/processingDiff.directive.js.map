{"version":3,"file":"processingDiff.directive.js","sourceRoot":"","sources":["../src/processingDiff.directive.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAgF;AAChF,mEAAiE;AAMjE;IAIE,iCACU,EAAc,EACd,GAA0B;QAD1B,OAAE,GAAF,EAAE,CAAY;QACd,QAAG,GAAH,GAAG,CAAuB;IAAK,CAAC;IAEnC,0CAAQ,GAAf;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEM,6CAAW,GAAlB;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,4CAAU,GAAlB;QACE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAC/C,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,wCAAwC;IAChC,4CAAU,GAAlB,UAAmB,KAAkB;QACnC,IAAI,IAAY,CAAC;QACjB,IAAI,GAAG,OAAO,CAAC;QACf,GAAG,CAAC,CAAa,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAjB,IAAI,IAAI,cAAA;YACX,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE1C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAiB,CAAC,CAAC,CAAC;gBAC7B,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAkB,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;YACvC,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAkB,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;YACvC,CAAC;SACF;QACD,IAAI,IAAI,QAAQ,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAvCQ;QAAR,YAAK,EAAE;;yDAAc;IACb;QAAR,YAAK,EAAE;;0DAAe;IAFZ,uBAAuB;QAHnC,gBAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;SAC7B,CAAC;yCAMc,iBAAU;YACT,8CAAqB;OANzB,uBAAuB,CAyCnC;IAAD,8BAAC;CAAA,AAzCD,IAyCC;AAzCY,0DAAuB","sourcesContent":["import { Directive, ElementRef, Input, OnInit, OnChanges } from '@angular/core';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\nimport { Diff, DiffOp } from './diffMatchPatch';\n\n@Directive({\n  selector: '[processingDiff]'\n})\nexport class ProcessingDiffDirective implements OnInit, OnChanges {\n  @Input() left: string;\n  @Input() right: string;\n\n  public constructor(\n    private el: ElementRef,\n    private dmp: DiffMatchPatchService) {  }\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    this.el.nativeElement.innerHTML = this.createHtml(\n      this.dmp.getProcessingDiff(this.left, this.right));\n  }\n\n  // TODO: Need to fix this for line diffs\n  private createHtml(diffs: Array<Diff>): string {\n    let html: string;\n    html = '<div>';\n    for (let diff of diffs) {\n      diff[1] = diff[1].replace(/\\n/g, '<br/>');\n\n      if (diff[0] === DiffOp.Equal) {\n        html += diff[1];\n      }\n      if (diff[0] === DiffOp.Delete) {\n        html += '<del>' + diff[1] + '</del>';\n      }\n      if (diff[0] === DiffOp.Insert) {\n        html += '<ins>' + diff[1] + '</ins>';\n      }\n    }\n    html += '</div>';\n    return html;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}